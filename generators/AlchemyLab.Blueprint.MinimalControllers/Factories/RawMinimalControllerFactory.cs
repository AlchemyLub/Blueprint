namespace AlchemyLab.Blueprint.MinimalControllers.Generator.Factories;

/// <summary>
/// Фабрика для генерации контроллеров
/// </summary>
internal static class RawMinimalControllerFactory
{
    /// <summary>
    /// Генерирует файл с расширениями для регистрации контроллеров
    /// </summary>
    /// <param name="context">Контекст генерации исходного кода</param>
    /// <param name="controllers">Информация о контроллерах</param>
    /// <param name="namespaceName">Пространство имен для генерируемого кода</param>
    public static void GenerateExtensionFile(
        SourceProductionContext context,
        ImmutableArray<ControllerInfo> controllers,
        string namespaceName = Templates.DefaultNamespace)
    {
        if (controllers.IsDefaultOrEmpty)
        {
            return;
        }

        IndentedStringBuilder builder = new();

        builder
            .AppendLine(Templates.AutoGeneratedComment)
            .AppendLine()
            .AppendLine(Templates.NullableEnableComment)
            .AppendLine();

        if (controllers.Any(t => t.SupportedVersions is not null))
        {
            builder.AppendLine("using Asp.Versioning;");
            builder.AppendLine("using Asp.Versioning.Builder;");
        }

        builder
            .AppendLine("using Microsoft.AspNetCore.Builder;")
            .AppendLine("using Microsoft.AspNetCore.Http;")
            .AppendLine("using Microsoft.AspNetCore.Routing;")
            .AppendLine()
            .AppendLine($"namespace {namespaceName}")
            .AppendLine("{");

        builder.Indent();

        builder
            .AppendLine("/// <summary>")
            .AppendLine("/// Методы расширения для регистрации MinimalAPI контроллеров")
            .AppendLine("/// </summary>")
            .AppendLine($"public static class {Templates.DefaultExtensionClassName}")
            .AppendLine("{");

        builder.Indent();

        // Метод регистрации всех контроллеров
        GenerateMapAllControllersMethod(builder, controllers);

        // Методы для отдельных контроллеров
        foreach (ControllerInfo controller in controllers)
        {
            GenerateMapControllerMethod(builder, controller);
        }

        builder
            .Outdent()
            .AppendLine("}");

        builder
            .Outdent()
            .AppendLine("}");

        // Регистрируем сгенерированный файл
        context.AddSource($"{Templates.DefaultExtensionClassName}.g.cs", builder.ToString());
    }

    /// <summary>
    /// Генерирует метод регистрации всех контроллеров
    /// </summary>
    /// <param name="builder">Строитель строк</param>
    /// <param name="controllers">Информация о контроллерах</param>
    private static void GenerateMapAllControllersMethod(IndentedStringBuilder builder, ImmutableArray<ControllerInfo> controllers)
    {
        const string controllerToken = "[controller]";

        builder
            .AppendLine("/// <summary>")
            .AppendLine("/// Регистрирует все контроллеры MinimalApi")
            .AppendLine("/// </summary>")
            .AppendLine("/// <param name=\"app\">Экземпляр приложения</param>")
            .AppendLine("/// <returns>Экземпляр приложения для цепочки вызовов</returns>")
            .AppendLine($"public static WebApplication {Templates.DefaultMapAllMethodName}(this WebApplication {Templates.AppParameterName})")
            .AppendLine("{");

        builder.Indent();

        foreach (ControllerInfo controller in controllers)
        {
            // TODO: Строки по работе с роутами надо куда-то вынести и переписать, чтобы было корректно и удобно. Пока что вышла каша
            string controllerNameWithoutPostfix = RouteHelper.GetControllerNameWithoutPostfix(controller.Name);

            if (controller.SupportedVersions is not null)
            {
                builder
                    .AppendLine($"ApiVersionSet {CreateApiVersionSetName(controllerNameWithoutPostfix)} = {Templates.AppParameterName}.NewApiVersionSet()")
                    .Indent();

                foreach (VersionInfo supportedVersion in controller.SupportedVersions)
                {
                    builder.AppendLine((supportedVersion.IsDeprecated, supportedVersion.Status) switch
                    {
                        (true, null) => $".HasDeprecatedApiVersion(new (version: {supportedVersion.Version}))",
                        (true, not null) => $".HasDeprecatedApiVersion(new (version: {supportedVersion.Version}, status: \"{supportedVersion.Status}\"))",
                        (false, null) => $".HasApiVersion(new (version: {supportedVersion.Version}))",
                        (false, not null) => $".HasApiVersion(new (version: {supportedVersion.Version}, status: \"{supportedVersion.Status}\"))"
                    });
                }

                builder
                    .AppendLine(".ReportApiVersions()")
                    .AppendLine(".Build();")
                    .AppendLine()
                    .Outdent();
            }

            string[] tags = controller.Tags.Length is 0
                ? [controllerNameWithoutPostfix]
                : controller.Tags;

            string controllerNameLowerFirstLetter = RouteHelper.LowerFirstLetter(controllerNameWithoutPostfix);

            string? template = controller.RouteInfo.Template;

            if (template is not null)
            {
                template = template.Contains(controllerToken)
                    ? template.Replace(controllerToken, controllerNameLowerFirstLetter, StringComparison.OrdinalIgnoreCase)
                    : template;
            }
            else
            {
                template = controllerNameLowerFirstLetter;
            }

            builder
                .AppendLine($"{Templates.AppParameterName}.MapGroup(\"{template}\")")
                .Indent()
                .AppendLine($".WithTags({string.Join(',', tags.Select(tag => $"\"{tag}\""))})");

            if (!string.IsNullOrEmpty(controller.Description))
            {
                builder.AppendLine($".WithDescription(\"{controller.Description}\")");
            }

            if (controller.Authorization.HasValue)
            {
                if (controller.Authorization.Value.WithParameters)
                {
                    builder
                        .AppendLine(".RequireAuthorization(new Microsoft.AspNetCore.Authorization.AuthorizeAttribute()")
                        .AppendLine("{")
                        .Indent();

                    if (!string.IsNullOrEmpty(controller.Authorization.Value.Policy))
                    {
                        builder.AppendLine($"Policy = \"{controller.Authorization.Value.Policy}\",");
                    }

                    if (!string.IsNullOrEmpty(controller.Authorization.Value.Roles))
                    {
                        builder.AppendLine($"Roles = \"{controller.Authorization.Value.Roles}\",");
                    }

                    if (!string.IsNullOrEmpty(controller.Authorization.Value.AuthenticationSchemes))
                    {
                        builder.AppendLine($"AuthenticationSchemes = \"{controller.Authorization.Value.AuthenticationSchemes}\"");
                    }

                    builder
                        .Outdent()
                        .AppendLine("})");
                }
                else
                {
                    builder.AppendLine(".RequireAuthorization()");
                }
            }

            if (controller.SupportedVersions is not null)
            {
                builder.AppendLine($".WithApiVersionSet({CreateApiVersionSetName(controllerNameWithoutPostfix)})");
            }

            builder.AppendLine($".Map{controller.Name}{Templates.MapApiSuffix}();");
        }

        builder
            .AppendLine()
            .Outdent()
            .AppendLine($"return {Templates.AppParameterName};");

        builder
            .Outdent()
            .AppendLine("}");
    }

    /// <summary>
    /// Генерирует метод регистрации отдельного контроллера
    /// </summary>
    /// <param name="builder">Строитель строк</param>
    /// <param name="controller">Информация о контроллере</param>
    private static void GenerateMapControllerMethod(IndentedStringBuilder builder, ControllerInfo controller)
    {
        builder
            .AppendLine()
            .AppendLine($"private static RouteGroupBuilder Map{controller.Name}{Templates.MapApiSuffix}(this RouteGroupBuilder {Templates.GroupParameterName})")
            .AppendLine("{");

        builder.Indent();

        foreach (EndpointInfo endpoint in controller.Endpoints)
        {
            builder
                .AppendLine($"{Templates.GroupParameterName}.{endpoint.HttpMethod}(\"{endpoint.RouteInfo.Template}\", {endpoint.MethodFullName})")
                .Indent();

            if (endpoint.Authorization.HasValue)
            {
                if (endpoint.Authorization.Value.WithParameters)
                {
                    builder
                        .AppendLine(".RequireAuthorization(new Microsoft.AspNetCore.Authorization.AuthorizeAttribute()")
                        .AppendLine("{")
                        .Indent();

                    if (!string.IsNullOrEmpty(endpoint.Authorization.Value.Policy))
                    {
                        builder.AppendLine($"Policy = \"{endpoint.Authorization.Value.Policy}\",");
                    }

                    if (!string.IsNullOrEmpty(endpoint.Authorization.Value.Roles))
                    {
                        builder.AppendLine($"Policy = \"{endpoint.Authorization.Value.Roles}\",");
                    }

                    if (!string.IsNullOrEmpty(endpoint.Authorization.Value.AuthenticationSchemes))
                    {
                        builder.AppendLine($"Policy = \"{endpoint.Authorization.Value.AuthenticationSchemes}\"");
                    }

                    builder
                        .Outdent()
                        .AppendLine("})");
                }
                else
                {
                    builder.AppendLine(".RequireAuthorization()");
                }
            }

            string controllerNameWithoutPostfix = RouteHelper.GetControllerNameWithoutPostfix(controller.Name);

            builder.Indent();

            builder.AppendLine(endpoint.RouteInfo.Name is not null
                ? $".WithName(\"{endpoint.RouteInfo.Name}\")"
                : $".WithName(\"{controllerNameWithoutPostfix}_{string.Join('_', endpoint.MethodFullName.Split('.').TakeLast(2))}\")");

            if (endpoint.RouteInfo.Order is not null)
            {
                builder.AppendLine($".WithOrder({endpoint.RouteInfo.Order})");
            }

            if (endpoint.ActiveVersions is not null)
            {
                foreach (VersionInfo activeVersion in endpoint.ActiveVersions)
                {
                    builder.AppendLine(activeVersion.Status is null
                        ? $".HasApiVersion(new (version: {activeVersion.Version}))"
                        : $".HasApiVersion(new (version: {activeVersion.Version}, status: \"{activeVersion.Status}\"))");
                }
            }

            builder
                .AppendLine(".WithOpenApi(opt =>")
                .AppendLine("{")
                .Indent()
                .AppendLine($"opt.OperationId = \"{controllerNameWithoutPostfix}.{endpoint.MethodFullName}\";");

            if (!string.IsNullOrEmpty(endpoint.Description))
            {
                builder.AppendLine($"opt.Description = \"{endpoint.Description}\";");
            }

            if (endpoint.IsDeprecated)
            {
                builder.AppendLine("opt.Deprecated = true;");
            }

            builder
                .AppendLine()
                .AppendLine("return opt;")
                .Outdent()
                .AppendLine("});")
                .Outdent()
                .Outdent()
                .AppendLine();
        }

        builder.AppendLine($"return {Templates.GroupParameterName};");

        builder
            .Outdent()
            .AppendLine("}");
    }

    private static string CreateApiVersionSetName(string controllerName) => $"apiVersionSet{controllerName}";
}
